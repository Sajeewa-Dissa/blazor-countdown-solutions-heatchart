@namespace BlazrCountdownApp.Components

@inject ICountdownService wfService

@if (result is { })
{
    <div class="summaryAndKey">
        <p>The chosen tiles solve @(result?.Coverage)% of targets.<br /> Please click or hover over the results grid for details</p>
        <div><img src="/images/key1.png" alt="key or legend"></div>
    </div>
}

<div class="mainWrapper">
    <main>
        @if (result is null)
        {
            <p><em>Calculating...</em></p>
        }
        else
        {
            @foreach (var item in result!.TileResults)
            {
                <section style="color:@(GetHeatchartTextColour(item.NumberOfSolutions)); background-color: @(GetHeatchartColour(item.NumberOfSolutions))">
                    @if(item.NumberOfSolutions > 0)
                    {
                        <Tooltip Text=@(GetToolTipText(item))>
                            <p @onclick="() => ShowDialogAsync(item.Target, item.NumberOfSolutions)">@item.Target</p>
                        </Tooltip>
                    }
                    else
                    {
                        <p>@item.Target</p>
                    }
                </section>
            }
        }
    </main>
</div>

<VanillaModalDialog @ref=_modal />

@code {
    [Parameter] public required int[] ChosenTileValues { get; init; }
    private VanillaModalDialog? _modal;

    private struct RgbColor
    {
        public RgbColor(float r, float g, float b)
        {
            R = r;
            G = g;
            B = b;
        }
        public float R { get; init; }
        public float G { get; init; }
        public float B { get; init; }
    }

    private static RgbColor blueColor = new RgbColor(50, 50, 255); //a slightly brighter blue
    private static RgbColor cyanColor = new RgbColor(0, 255, 255);
    private static RgbColor greenColor = new RgbColor(0, 255, 0);
    private static RgbColor yellowColor = new RgbColor(255, 255, 0);
    private static RgbColor redColor = new RgbColor(255, 0, 0);

    CountdownResultsModel? result;

    protected override async Task OnInitializedAsync() => result = (await wfService.ExecuteSolveAllAsync(ChosenTileValues));


    private async Task ShowDialogAsync(int target, int numOfSolutions)
    {
        if (_modal is not null)
        {
            var options = new VanillaModalOptions();
            options.ControlParameters.Add("Target", target);
            options.ControlParameters.Add("Numbers", ChosenTileValues);
            options.ControlParameters.Add("NumberOfSolutions", numOfSolutions);

            var result = await _modal.Context.ShowAsync<SolutionsListDialog>(options);
        }
    }


    private static string GetToolTipText(CountdownResultsModel.TileResult item)
    {
        if(item.NumberOfSolutions > 1)
        {
            return $"Target {item.Target} has {item.NumberOfSolutions} solutions including: {item.FirstSolution}";
        }
        return $"Target {item.Target} has 1 solution: {item.FirstSolution}";
    }


    private static string GetHeatchartColour(int n)
    {
        return n switch
        {
            > 3000 => $"rgb(255, 0, 0)",                                     //3001 or above red
            >= 1001 => getColourString(yellowColor, redColor, 1001, 3000, n),//1001 to 3000 is gradient yellow to red
            >= 301 => getColourString(greenColor, yellowColor, 301, 1001, n),//301 to 1001 is gradient green to yellow
            >= 30 => getColourString(cyanColor, greenColor, 30, 301, n),     //30 to 301 is gradient cyan to green
            >= 2 => getColourString(blueColor, cyanColor, 1, 30, n),         //2 to 30 is gradient blue to cyan
            >= 1 => "rgb(50, 50, 255)",                                      //1 is blue
            < 1 => "rgb(0, 0, 0)"                                           //zero is black
        };

        string getColourString(RgbColor fromColor, RgbColor toColor, float fromVal, float toVal, float val)
        {
            float fractBetween = (val - fromVal) / (toVal - fromVal);
            int red = (int)(fromColor.R + ((toColor.R - fromColor.R) * fractBetween));
            int green = (int)(fromColor.G + ((toColor.G - fromColor.G) * fractBetween));
            int blue = (int)(fromColor.B + ((toColor.B - fromColor.B) * fractBetween));
            return $"rgb({red}, {green}, {blue})";
        }
    }


    private static string GetHeatchartTextColour(int target) //beyond a certain colour set text to black.
    {
        if (target < 22)
        {
            return "rgb(200, 200, 200)";
        }
        return "rgb(0, 0, 0)";
    }
}
