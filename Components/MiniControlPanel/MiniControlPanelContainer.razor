@namespace BlazrCountdownApp.Components
@inject IToastService toastSvc

<div class="miniControlPanel-wrapper">
    <div>
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>
    <button class="btn btn-primary" @ontouchstart="OnSolveButtonTouch" @onclick="OnSolveButtonClicked" disabled="@IsSolveDisabled">Solve All</button>
    <button class="btn btn-primary" @onclick="OnResetButtonClicked">Reset Page</button>
</div>



@code {
    [Parameter] required public List<TileModel> Tiles { get; init; }
    [Parameter] public RenderFragment? ChildContent { get; init; }
    [Parameter] public EventCallback<TileModel> onStatusUpdated { get; init; }
    [Parameter] public EventCallback ResetButtonClicked { get; init; }
    [Parameter] public EventCallback<int[]> SolveButtonClicked { get; init; } //Blazor EventCallback<T> is a single-cast event handler. Can't subscribe to multiple events.
                                                                              //.Net event delegates are classes but this is a [non-null] struct.

    public required TileModel Payload { get; set; }
    public int ChosenCount { get; set; }
    public required int[] ChosenTilesValues { get; set; }
    public bool IsSolveDisabled { get; set; } = true;

    public async Task UpdateTileAsync(TileStatusEnum newStatus)
    {
        var Task = Tiles.SingleOrDefault(x => x.Id == Payload.Id);
        if (Task is not null)
        {
            if(newStatus == TileStatusEnum.Chosen)
            {
                Task.Status = Task.Type == TileTypeEnum.Small ? TileStatusEnum.ChosenSmall : TileStatusEnum.ChosenLarge;
            }
            else //the tile has been unchosen.
            {
                Task.Status = Task.Type == TileTypeEnum.Small ? TileStatusEnum.UnchosenSmall : TileStatusEnum.UnchosenLarge;
            }
            await onStatusUpdated.InvokeAsync(Payload); //emit the event.
        }
    }


    public async Task UpdateTouchTileAsync(TileStatusEnum status)
    {
        var Task = Tiles.SingleOrDefault(x => x.Id == Payload.Id);
        if (Task is not null)
        {
            if (status == TileStatusEnum.UnchosenSmall)
            {
                Task.Status = TileStatusEnum.ChosenSmall;
            }
            else if (status == TileStatusEnum.UnchosenLarge)
            {
                Task.Status = TileStatusEnum.ChosenLarge;
            }
            else if (status == TileStatusEnum.Chosen && Payload.Type == TileTypeEnum.Small)
            {
                Task.Status = TileStatusEnum.UnchosenSmall;
            }
            else
            {
                Task.Status = TileStatusEnum.UnchosenLarge;
            }

            if (ChosenTilesValues.Length == 5 && (Task.Status == TileStatusEnum.ChosenSmall || Task.Status == TileStatusEnum.ChosenLarge))
            {
                IsSolveDisabled = false;
            }
            else
            {
                IsSolveDisabled = true;
            }

            await onStatusUpdated.InvokeAsync(Payload); //emit the event.
        }
    }


    protected async Task OnSolveButtonClicked()
    {
        await SolveButtonClicked.InvokeAsync(ChosenTilesValues);
    }

    protected async Task OnResetButtonClicked()
    {
        IsSolveDisabled = true;
        await ResetButtonClicked.InvokeAsync(null);
    }

    protected async Task OnSolveButtonTouch()
    {
        await SolveButtonClicked.InvokeAsync(ChosenTilesValues);
        toastSvc.ShowSuccess("Completed. Please scroll down to view results.");
    }

}
